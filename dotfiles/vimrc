"
"  :so %    " source this file
" Enable Python 3 support
" $ sudo apt remove vim && sudo apt remove --auto-remove vim
" $ sudo rm -rf /usr/local/share/vim /usr/bin/vim
" $ cd && git clone https://github.com/vim/vim.git
" $ cd vim/src
" $ ./configure --with-features=huge --enable-python3interp
" $ make
" $ sudo make install

set nocompatible
set paste

let g:solarized_termtrans = 1
<<<<<<< HEAD:dotfiles/vim/vimrc
colorscheme darkblue
set background=dark 
" colorscheme solarized8_flat
=======
" colorscheme solarized8_flat
colorscheme murphy 
>>>>>>> da96c1e9e6d638c39f3fb7079e796ca39a3839df:dotfiles/vimrc

"let g:slime_target = "screen"
"let g:slime_target = "vimterminal"

filetype plugin indent on
syntax on
set number
set hidden " Allow switching buffers without writing to disk
set wildignore+=*.pyc,*.pyo,__pycache__
set backspace=indent,eol,start
set noswapfile

set clipboard=unnamed " so you can copy from other programs to vim
set number " relativenumber    " use :set nu! rnu! to toggle it on or off

let $RTP=split(&runtimepath, ',')[0]
let $RC="$HOME/.vim/vimrc"
set path=.,** 

" Enable folding
" you have to type za to fold (and unfold).
set foldmethod=indent
set foldlevel=99
" Enable folding with spacebar
nnoremap <space> zaG



" kdb q
" https://github.com/patmok/qvim/blob/master/.vimrc
hi Special ctermfg=red " for query specific keywords
hi Underlined ctermfg=magenta cterm=bold " for local variables
set tags=tags;

" Python
" set shiftwidth=4 tabstop=4 softtabstop=4 expandtab autoindent smartindent
au BufNewFile, BufRead *.py
    \ set tabstop=4
<<<<<<< HEAD:dotfiles/vim/vimrc
    \ softtabstop=4
    \ shiftwidth=4
    \ textwidth=79
    \ expandtab
    \ autoindent
    \ smartindent
    \ fileformat=unix
=======
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=79
    \ set expandtab
    \ set autoindent
    \ set smartindent
    \ set fileformat=unix
>>>>>>> da96c1e9e6d638c39f3fb7079e796ca39a3839df:dotfiles/vimrc

" For full stack development, you can use another au command for each filetype:
au BufNewFile, BufRead *.js, *.html, *.css
    \ set tabstop=2
    \ softtabstop=2
    \ shiftwidth=2


" Flagging Unnecessary Whitespace
au BufRead, BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
" au BufRead, BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Only map the ones you most frequently need
" REMEMBER you can always run in vim as ! clear; python %
" https://stackoverflow.com/questions/18948491/running-python-code-in-vim
map <F3> :! echo "====$(date)====" && bash -c shellescape(expand('%'))<enter>
" map <F3> :! echo "====$(date)===="; bash -c % <enter>
"autocmd FileType python map <buffer> <F2> :w<CR>:exec '!python3' shellescape(@%, 1)<CR>
"autocmd FileType python imap <buffer> <F2> <esc>:w<CR>:exec '!python3' shellescape(@%, 1)<CR>

augroup python_files
  autocmd!
  autocmd FileType python map <buffer> <F2> :w<CR>:exec '!python3' shellescape(@%, 1)<CR>
  autocmd FileType python imap <buffer> <F2> <esc>:w<CR>:exec '!python3' shellescape(@%, 1)<CR>
augroup END

augroup q_files
  autocmd!
  autocmd FileType *.q map <buffer> <F4> :w<CR>:exec '!$HOME/q/l64/q' shellescape(@%, 1)<CR>
  "autocmd FileType *.q map <buffer> <F2> :w<CR>:exec '! $HOME/q/l64/q' shellescape(@%, 1)<CR>
  autocmd FileType *.q imap <buffer> <F4> <esc>:w<CR>:exec '!$HOME/q/l64/q' shellescape(@%, 1)<CR>
augroup END

" inoremap <nowait> jk <ESC>
" inoremap <nowait> kj <ESC>
" vnoremap <nowait> jk <ESC>
cnoremap jk <C-C>  
" esc in insert mode 
inoremap jk <esc> 


call plug#begin()
" https://github.com/junegunn/vim-plug
" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'
Plug 'dense-analysis/ale'
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }

" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting
